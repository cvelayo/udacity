cutoff <- sort(highinterest$predicted.risk, decreasing=FALSE)[100]
selectedloans <- subset(highinterest, predicted.risk <= cutoff)
sum(selectedloans$profit)
sum(selectedloans$not.fully.paid)
baseball <- read.csv("baseball.csv")
summary(baseball)
str(baseball)
table(baseball$Year)
baseball <- subset(baseball, Playoffs == 1)
table(baseball$Year)
table(table(baseball$Year))
PlayoffTable = table(baseball$Year)
PlayoffTable
names(PlayoffTable)
PlayoffTable[c("1990", "2001")]
PlayoffTable[as.character(baseball$Year)]
baseball$NumCompetitors = PlayoffTable[as.character(baseball$Year)]
table(baseball$NumCompetitors)
baseball$WorldSeries = as.numeric(baseball$RankPlayoffs == 1)
sum(baseball$WorldSeries)
nrow(baseball) - sum(baseball$WorldSeries)
mod01 <- glm(WorldSeries ~ Year, data = baseball, family = "binomial")
mod02 <- glm(WorldSeries ~ RS, data = baseball, family = "binomial")
mod03 <- glm(WorldSeries ~ RA, data = baseball, family = "binomial")
mod04 <- glm(WorldSeries ~ W, data = baseball, family = "binomial")
mod05 <- glm(WorldSeries ~ OBP, data = baseball, family = "binomial")
mod06 <- glm(WorldSeries ~ SLG, data = baseball, family = "binomial")
mod07 <- glm(WorldSeries ~ BA, data = baseball, family = "binomial")
mod08 <- glm(WorldSeries ~ RankSeason, data = baseball, family = "binomial")
mod09 <- glm(WorldSeries ~ OOBP, data = baseball, family = "binomial")
mod10 <- glm(WorldSeries ~ OSLG, data = baseball, family = "binomial")
mod11 <- glm(WorldSeries ~ NumCompetitors, data = baseball, family = "binomial")
mod12 <- glm(WorldSeries ~ League, data = baseball, family = "binomial")
summary(mod01)
summary(mod02)
summary(mod03)
summary(mod04)
summary(mod05)
summary(mod06)
summary(mod07)
summary(mod08)
summary(mod09)
summary(mod10)
summary(mod11)
summary(mod12)
mod <- glm(WorldSeries ~ Year + RA + RankSeason+NumCompetitors, data = baseball, family = "binomial")
summary(mod)
cor(baseball)
cor(baseball$Year,baseball$RA,baseball$RankSeason,baseball$NumCompetitors)
cor(baseball$Year, baseball$RA)
cor(baseball$Year, baseball$RankSeason)
cor(baseball$Year, baseball$NumCompetitors)
cor(baseball$RankSeason, baseball$RA)
cor(baseball$NumCompetitors, baseball$RA)
cor(baseball$NumCompetitors, baseball$RankSeason)
summary(mod01)
modYear <- mod01
modRA <- mod03
summary(mod03)
modRankSeason <- mod08
summary(mod08)
modNumCompetitors <- mod11
summary(mod11)
modYearRA <- glm(WorldSeries ~ Year + RA, data = baseball, family = "binomial")
summary(modYearRA)
modYearRankSeason <- glm(WorldSeries ~ Year + RankSeason, data = baseball, family = "binomial")
summary(modYearRankSeason)
modYearCompetitors <- glm(WorldSeries ~ Year + NumCompetitors, data = baseball, family = "binomial")
summary(modYearCompetitors)
modRARankSeason <- glm(WorldSeries ~ RA + RankSeason, data = baseball, family = "binomial")
summary(modRARankSeason)
modRACompetitors <- glm(WorldSeries ~ RA + NumCompetitors, data = baseball, family = "binomial")
summary(modRACompetitors)
modRankSeasonCompetitors <- glm(WorldSeries ~ RankSeason + NumCompetitors, data = baseball, family = "binomial")
summary(modRankSeasonCompetitors)
lib.loc()
?lib
lib()
?lib.locale
.libPaths()
.libPaths
.libPaths()
install.packages(c("BH", "BradleyTerry2", "car", "caret", "chron", "colorspace", "devtools", "dplyr", "evaluate", "forecast", "formatR", "gdata", "ggplot2", "googleVis", "gtools", "highr", "jsonlite", "knitr", "manipulate", "markdown", "mime", "NLP", "openNLP", "plotrix", "plyr", "qdap", "qdapDictionaries", "qdapRegex", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rpart", "rstudioapi", "scales", "shiny", "shinyFiles", "stringdist", "stringr", "swirl", "testthat", "timeDate", "tm", "tseries", "XML", "zoo"))
install.packages("flexclust")
install.packages("RWeka")
install.packages(c("caret", "e1071"))
library("RWeka", lib.loc="~/R/win-library/3.1")
who <- read.csv("WHO.csv")
str(who)
rm(polling)
colors()
plot(who$GNI, who$FertilityRate)
library(ggplot2)
scatterplot <- ggplot(WHO, aes(GNI,FertilityRate))
scatterplot <- ggplot(who, aes(GNI,FertilityRate))
scatterplot + geom_point()
scatterplot + geom_line()
scatterplot + geom_point()
scatterplot + geom_point(color="blue", size=3, shape=17)
scatterplot + geom_point(color="darkred", size=3, shape=8)
scatterplot + geom_point(color="darkred", size=3, shape=8) + ggtitle("Fertility Rate vs. Gross National Income")
ggplot(who, aes(GNI, FertilityRate, color=Region)) + geom_point()
ggplot(who, aes(GNI, FertilityRate, color=LifeExpectancy)) + geom_point()
str(who)
ggplot(who,aes(FertilityRate, Under15))+geom_point()
ggplot(who,aes(log(FertilityRate), Under15))+geom_point()
cor(log(who$FertilityRate), who$Under15)
model <- lm(Under15 ~ log(FertilityRate), data=who)
summary(model)
ggplot(who,aes(log(FertilityRate), Under15))+geom_point() +stat_smooth(method=lm)
ggplot(who,aes(log(FertilityRate), Under15))+geom_point() +stat_smooth(method=lm, level=0.99)
ggplot(who,aes(log(FertilityRate), Under15))+geom_point() +stat_smooth(method=lm, level=FALSE)
ggplot(who,aes(log(FertilityRate), Under15))+geom_point() +stat_smooth(method=lm, se=FALSE)
ggplot(who,aes(log(FertilityRate), Under15))+geom_point() +stat_smooth(method=lm, se=FALSE, color=orange)
ggplot(who,aes(log(FertilityRate), Under15))+geom_point() +stat_smooth(method=lm, se=FALSE, color="orange")
ggplot(who, aes(x = FertilityRate, y = Under15, color=Region)) + geom_point()
ggplot(who, aes(x = FertilityRate, y = Under15, color=Region)) + geom_point() + scale_color_brewer(palette="Dark2")
mvt <- read.csv("mvt.csv", stringsAsFactors = FALSE)
str(mvt)
mvt$Date <- strptime(mvt$Date, format="%m/%d/%y %H:%M")
str(mvt)
mvt$WeekDay <- weekdays(mvt$Date)
mvt$Hour <- mvt$Date$hour
str(mvt)
table(mvt$WeekDay)
WeekdayCounts <- as.data.frame(table(mvt$WeekDay))
str(WeekdayCounts)
ggplot(WeekdayCounts, aes(Var1, Freq))+geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(Var1, Freq))+geom_line()
ggplot(WeekdayCounts, aes(Var1, Freq))+geom_line(aes(group=1))
WeekdayCounts$Var1 <- factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Sunday", "Monday", "Tuesday","Wednesday","Thursday","Friday","Saturday"))
ggplot(WeekdayCounts, aes(Var1, Freq))+geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(Var1, Freq))+geom_line(aes(group=1)) + xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
ggplot(WeekdayCounts, aes(Var1, Freq))+geom_line(aes(group=1),linetype=2) + xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
ggplot(WeekdayCounts, aes(Var1, Freq))+geom_line(aes(group=1),alpha=.3) + xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
table(mvt$WeekDay, mvt$Hour)
dayHourCounts <- as.data.frame(table(mvt$WeekDay, mvt$Hour))
str(dayHourCounts)
dayHourCounts$Hour <- as.numeric(as.character(dayHourCounts$Var2))
str(dayHourCounts)
ggplot(dayHourCounts, aes(Hour, Freq))+geom_line(aes(group=Var1))
ggplot(dayHourCounts, aes(Hour, Freq))+geom_line(aes(group=Var1,color=Var1))
ggplot(dayHourCounts, aes(Hour, Freq))+geom_line(aes(group=Var1,color=Var1),size=2)
dayHourCounts$Var1 <- factor(dayHourCounts$Var1, ordered=TRUE, levels=c("Sunday", "Monday", "Tuesday","Wednesday","Thursday","Friday","Saturday"))
ggplot(dayHourCounts,aes(Hour,Var1))+geom_tile(aes(fill=Freq))
ggplot(dayHourCounts,aes(Hour,Var1))+geom_tile(aes(fill=Freq))+scale_fill_gradient(name="Total MV Thefts")
ggplot(dayHourCounts,aes(Hour,Var1))+geom_tile(aes(fill=Freq))+scale_fill_gradient(name="Total MV Thefts") + theme(axis.title.y=element_blank())
ggplot(dayHourCounts,aes(Hour,Var1))+geom_tile(aes(fill=Freq))+scale_fill_gradient(name="Total MV Thefts", low="white", high="red") + theme(axis.title.y=element_blank())
install.packages("ggmap")
library(ggmap)
library(maps)
chicago = get_map(location = "chicago",zoom = 11)
ggmap(chicago)
ggmap(chicago)+geom_point(data=mvt[1:100],aes(x=Longitude, y=Latitude))
ggmap(chicago)+geom_point(data=mvt[1:100,],aes(x=Longitude, y=Latitude))
latLonCounts <- as.data.frame(round(mvt$Longitude,2), round(mvt$Latitude,2))
latLonCounts <- as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2))
)
latLonCounts$Long <- as.numeric(as.character(latLonCounts$Var2))
latLonCounts$Lat <- as.numeric(as.character(latLonCounts$Var1))
ggmap(chicago) + geom_point(data=latLonCounts,aes(x=Long, y=Lat, color=Freq, size=Freq))
ggmap(chicago) + geom_point(data=latLonCounts,aes(x=Lat, y=Long, color=Freq, size=Freq))
ggmap(chicago) + geom_point(data=latLonCounts,aes(x=Lat, y=Long, color=Freq, size=Freq)) + scale_color_gradient(low = "yellow", high="red")
ggmap(chicago) + geom_tile(data=latLonCounts,aes(x=Lat, y=Long, alpha=Freq),fill="red")
latLonCounts2 <- latLonCounts[Freq > 0,]
latLonCounts2 <- latLonCounts[latLonCounts$Freq > 0,]
ggmap(chicago) + geom_tile(data=latLonCounts,aes(x=Lat, y=Long, alpha=Freq),fill="red")
ggmap(chicago) + geom_tile(data=latLonCounts2,aes(x=Lat, y=Long, alpha=Freq),fill="red")
1638-686
murders <- read.csv("murders.csv")
str(murders)
statesMap <- map_data("state")
str(statesMap)
ggplot(data=statesMap, aes(x=long, y=lat, group=group)) + geom_polygon(fill="white", color="black")
murders$region <- to.lower(murders$State)
murders$region <- tolower(murders$State)
murderMap <- merge(statesMap, murders, by="region")
str(murderMap)
ggplot(data=murderMap, aes(x=long, y=lat, group=group,fill=Murders)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red")
ggplot(data=murderMap, aes(x=long, y=lat, group=group,fill=Murders)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend")
ggplot(data=murderMap, aes(x=long, y=lat, group=group,fill=Population)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend")
murderMap$murderRate <- murderMap$Murders/murderMap$Population * 100000
ggplot(data=murderMap, aes(x=long, y=lat, group=group,fill=murderRate)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend")
ggplot(data=murderMap, aes(x=long, y=lat, group=group,fill=murderRate)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend",limits=c(0,10))
ggplot(data=murderMap, aes(x=long, y=lat, group=group,fill=GunOwnership)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend",limits=c(0,10))
ggplot(data=murderMap, aes(x=long, y=lat, group=group,fill=GunOwnership)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide="legend")
mit <- read.csv("intl.csv")
intl <- mit
ggplot(intl, aes(Region, PercentOfIntl)) + geom_bar(stat="identity") + geom_text(aes(label=PercentOfIntl))
intl <- transform(intl,Region = reorder(Region, -PercentOfIntl))
str(intl)
intl$PercentOfIntl <- intl$PercentOfIntl * 100
ggplot(intl, aes(Region, PercentOfIntl)) + geom_bar(stat="identity") + geom_text(aes(label=PercentOfIntl))
ggplot(intl, aes(Region, PercentOfIntl)) + geom_bar(stat="identity", fill="darkblue") + geom_text(aes(label=PercentOfIntl))
ggplot(intl, aes(Region, PercentOfIntl)) + geom_bar(stat="identity", fill="darkblue") + geom_text(aes(label=PercentOfIntl), vjust=-.4)+ylab("Percent of International Students") + theme(axis.title.x = element_blank(), axis.text.x = element_text(angle=45, hjust=1))
intall <- read.csv("intall.csv", stringsAsFactors = FALSE)
intlall <- read.csv("intlall.csv", stringsAsFactors = FALSE)
head(intlall)
intlall[is.na(intlall)] = 0
head(intlall)
worldmap <- map_data(world)
worldmap <- map_data("world")
str(worldmap)
world <- merge(worldmap, intlall, by.x="region", by.y="Citizenship")
str(world)
ggmap(world, aes(x=long, y=lat, group=group)) + geom_polygon(fill="white", color="black") + coord_map("mercator")
ggplot(world, aes(x=long, y=lat, group=group)) + geom_polygon(fill="white", color="black") + coord_map("mercator")
world <- world[order(world$group, world$order),]
ggplot(world, aes(x=long, y=lat, group=group)) + geom_polygon(fill="white", color="black") + coord_map("mercator")
table(intlall)
table(intlall$Citizenship)
intall
intlall
intlall$Citizenship[intlall$Citizenship == "China (People's Republic Of)"] <- "China"
table(intlall$Citizenship)
world <- merge(worldmap, intlall, by.x="region", by.y="Citizenship")
world <- world[order(world$group, world$order),]
ggplot(world, aes(x=long, y=lat, group=group)) + geom_polygon(aes(fill=Total), color="black") + coord_map("mercator")
ggplot(world, aes(x=long, y=lat, group=group)) + geom_polygon(aes(fill=Total), color="black") + coord_map("ortho", orientation=c(20,30,0))
ggplot(world, aes(x=long, y=lat, group=group)) + geom_polygon(aes(fill=Total), color="black") + coord_map("ortho", orientation=c(-37,175,0))
x <- c(.259,.482,.671,1.653,.752,1.437,1.75,1.33,1.47,3.028)
y <- c(-.)
y <- c(-.217,-.260,-.308,-.809,-1.297,-2.493,-1.69,-1.056,-1.453,-2.421)
mx <- mean(x)
my <- mean(y)
ssxx <- sum((x-mx)^2)
ssyy <- sum((y-my)^2)
ssxy <- sum((x-mx)*(y-my))
cor(x,y)
x<- c(.239,.59,.753,1.162,1.115,1.532,1.837,2.161,2.126,2.332)
y <- c(.1,.349,.517,1.003,1.731,2.337,3.043,4.035,5.112,6.236)
cor(x,y)
x <- c(1, 1.5, 2, 2.5, 1.5, 2, 2.5, 3, 2, 2.5, 3, 3.5, 2.5, 3, 3.5, 4)
sd(x)
sum((x -mean(x))^2)
sum((x -mean(x))^2)/length(x)
10/(length(x)-1)
y  <- c(1,2,3,4)
sum((y -mean(y))^2)/length(y)
sqrt(sum((y -mean(y))^2)/length(y))
sqrt(sum((x -mean(x))^2)/length(x))
y <- c(356, 536, 1032, 209,285)
sqrt(sum((y -mean(y))^2)/length(y))
sqrt(sum((y -mean(y))^2)/length(y))/sqrt(length(y))
mean(y) + (sqrt(sum((y -mean(y))^2)/length(y))/sqrt(length(y))
) * 2.776
mean(y) - (sqrt(sum((y -mean(y))^2)/length(y))/sqrt(length(y))
) * 2.776
x <- c(1,2,3,4,5,6)
sqrt(sum((x - mean(x))^2)/6)
sqrt(sum((x - mean(x))^2)/6)/sqrt(2)
338 + (sqrt(sum((y -mean(y))^2)/length(y))/sqrt(length(y))
) * 2.776
338 - (sqrt(sum((y -mean(y))^2)/length(y))/sqrt(length(y))
) * 2.776
length(y)
mean(y)
338 - sd(y)/sqrt(5)
338 - (sd(y)/sqrt(5)*2.776)
338 + (sd(y)/sqrt(5)*2.776)
mean(y) + (sd(y)/sqrt(5)*2.776)
mean(y) - (sd(y)/sqrt(5)*2.776)
y
mean(y) + ((sd(y)/sqrt(5))*2.776)
mean(y) - ((sd(y)/sqrt(5))*2.776)
mean(y)
sd(y)/sqrt(5)
sd(y)/sqrt(5) * 2.776
mean(y)
y - mean(y)
(y - mean(y))^2
sum((y - mean(y))^2)
sum((y - mean(y))^2)/5
sqrt(sum((y - mean(y))^2)/5)
sqrt(sum((y - mean(y))^2)/4)
sd(y)
330/sqrt(5)
148 * 2.776
484+411
484-411
sd(y)
sd(y)/sqrt(length(y))
sd(y)/sqrt(length(y)) * 2.776
mean(y) - sd(y)/sqrt(length(y)) * 2.776
mean(y) + sd(y)/sqrt(length(y)) * 2.776
x<-(16.65
13.20
17.20
11.50
54.08
16.09
75.50
26.00
2.79
10.11)
x<-c(-1.57,.51,-3.57,5.42,5.25,1.51,-2,-.12,.24,-2.12)
mean(x)
sum(x - mean(x)^2)
sum(x - mean(x)^2)/length(x)
sqrt(sum(x - mean(x)^2)/length(x))
sd(X)
sd(x)
sd(x)/sqrt(10) * 1.833
mean(x) + sd(x)/sqrt(10) * 1.833
mean(x) - sd(x)/sqrt(10) * 1.833
stroop <- read.csv("stroopdata.csv")
stroop
?t.test
t.test(stroop)
t.test(stroop, paired=TRUE)
t.test(stroop$Congruent, stroop$Incongruent, paired=TRUE)
mean(stroop)
mean(stroop$Congruent)
mean(stroop$Incongruent)
sd(stroop$Congruent)
sd(stroop$Incongruent)
plot(stroop$Congruent)
plot(stroop$Inongruent)
plot(stroop$Incongruent)
par(mfrow=c(1,2), las=2, mar=c(5,8,4,2))
plot(stroop$Congruent)
plot(stroop$Congruent)
?par
plot.default()
plot(stroop$Congruent)
plot.default(stroop$Congruent)
par()
plot.default(stroop$Congruent)
plot.default(stroop$Incongruent)
par(mfrow=c(1,1), las=2, mar=c(5,8,4,2))
plot(stroop$Congruent)
?plot
plot(stroop$Congruent, yaxp=c(0,max(stroop$Incongruent)))
plot(stroop$Congruent, yaxp=c(0,max(stroop$Incongruent),n))
plot(stroop$Congruent, yaxp=c(0,max(stroop$Incongruent),1))
points(stroop$Incongruent)
plot(stroop$Congruent, yaxp=c(0,max(stroop$Incongruent)+4,2))
plot(stroop$Congruent, yaxp=c(0,max(stroop$Incongruent)+4,3))
points(stroop$Incongruent)
plot(stroop$Congruent, yaxp=c(0,max(stroop$Incongruent)+4,3))
axis(2)
par(opar)
plot(stroop$Congruent, ylim=c(0,max(stroop$Incongruent)+4))
points(stroop$Incongruent)
points(stroop$Incongruent, color="red")
points(stroop$Incongruent, col="red")
?points
points(stroop$Incongruent, col="red", type=19)
points(stroop$Incongruent, col="red", pch=19)
points(stroop$Congruent, col="blue", pch=19)
lm(stroop$Incongruent)
?lm
line = lm(stroop$Incongruent)
?line
?abline
abline(lm(stroop$Incongruent))
abline(lm(stroop$Incongruent~))
abline(lm(stroop$Incongruent~.))
ylab("seconds")
plot(stroop$Congruent, ylim=c(0,max(stroop$Incongruent)+4), ylab="Seconds", xlab="")
points(stroop$Incongruent, col="red", pch=19)
points(stroop$Congruent, col="blue", pch=19)
abline(mean(stroop$Congruent), col="blue", lwd=2)
abline(h=mean(stroop$Congruent), col="blue", lwd=2)
abline(h=mean(stroop$Incongruent), col="red", lwd=2)
0.85552-0.84870
plot(stroop$Congruent, ylim=c(0,max(stroop$Incongruent)+4), ylab="Seconds", xlab="", main="Comparison of Congruent and Incongruent Conditions")
dev.off()
plot(stroop$Congruent, ylim=c(0,max(stroop$Incongruent)+4), ylab="Seconds", xlab="", main="Comparison of Congruent and Incongruent Conditions")
plot(stroop$Congruent, ylim=c(0,max(stroop$Incongruent)+4), ylab="Seconds", xlab="", main="Comparison of Congruent Word \nand Incongruent Word Conditions in the Stroop Test")
plot(stroop$Congruent, ylim=c(0,max(stroop$Incongruent)+4), ylab="Seconds", xlab="", main="Comparison of Congruent Word and\nIncongruent Word Conditions in the Stroop Test")
points(stroop$Incongruent, col="red", pch=19)
points(stroop$Congruent, col="blue", pch=19)
abline(mean(stroop$Congruent), col="blue", lwd=2)
abline(h=mean(stroop$Congruent), col="blue", lwd=2)
abline(h=mean(stroop$Incongruent), col="red", lwd=2)
?legend
legend(5,5, c("Congruent","Incongruent"), pch=19, col=c("blue","red"))
legend(1,40, c("Congruent","Incongruent"), pch=19, col=c("blue","red"))
plot(stroop$Congruent, ylim=c(0,max(stroop$Incongruent)+4), ylab="Seconds", xlab="", main="Comparison of Congruent Word and\nIncongruent Word Conditions in the Stroop Test")
points(stroop$Incongruent, col="red", pch=19)
points(stroop$Congruent, col="blue", pch=19)
abline(h=mean(stroop$Congruent), col="blue", lwd=2)
abline(h=mean(stroop$Incongruent), col="red", lwd=2)
legend(1,40, c("Congruent","Incongruent"), pch=19, col=c("blue","red"))
plot(stroop$Congruent, ylim=c(0,max(stroop$Incongruent)+4), ylab="Seconds", xlab="", main="Comparison of Congruent Word and\nIncongruent Word Conditions in the Stroop Test")
points(stroop$Incongruent, col="red", pch=19)
points(stroop$Congruent, col="blue", pch=19)
abline(h=mean(stroop$Congruent), col="blue", lwd=2)
abline(h=mean(stroop$Incongruent), col="red", lwd=2)
legend(1,40, c("Congruent Words","Incongruent Words"), pch=19, col=c("blue","red"))
t.test(stroop$Congruent, stroop$Incongruent, paired=TRUE)
ttest <- t.test(stroop$Congruent, stroop$Incongruent, paired=TRUE
)
str(ttest)
?t.test
ttest <- t.test(stroop$Congruent, stroop$Incongruent, paired=TRUE, alternative="g")
str(ttest)
ttest
ttest <- t.test(stroop$Congruent, stroop$Incongruent, paired=TRUE, alternative="l")
ttest
ttest <- t.test(stroop$Congruent, stroop$Incongruent, paired=TRUE, alternative="l", var.equal =TRUE)
ttest
train <- read.csv("eBayiPadTrain.csv")
test <- read.csv("eBayiPadTest.csv")
train$description <- NULL
test$description <- NULL
?glm
train$UniqueID <- NULL
lrmodel <- glm(sold ~ ., data = train, family="binomial")
summary(lrmodel)
train$biddable <- as.factor(train$biddable)
test$biddable <- as.factor(test$biddable)
lrmodel <- glm(sold ~ ., data = train, family="binomial")
summary(lrmodel)
lrmodel2 <- glm(sold ~ . - color - carrier - cellular, data=train, family="binomial")
summary(lrmodel2)
pred1 <- predict(lrmodel)
?predict.glm
pred1 <- predict(lrmodel, type="response")
table(train$sold, pred1>=.5)
(847+643)/nrow(train)
pred2 <- predict(lrmodel2, type="response")
table(train$sold, pred2>=.5)
library(ROCR)
predict1 <- prediction(pred1, train$sold)
perf1 = performance(predict1, "tpr", "fpr")
plot(perf1, colorize=TRUE)
predict2 <- prediction(pred2, train$sold)
perf2 = performance(predict2, "tpr", "fpr")
plot(perf2, colorize=TRUE)
install.packages("ada")
?train
library("caret", lib.loc="~/R/win-library/3.1")
?train
boosted <- train(sold ~ ., data=train, method="ada", metric="Kappa", maximize=TRUE)
boosted <- train(x = train, y = train$sold, method="ada", metric="Kappa", maximize=TRUE)
str(train$sold)
train$sold <- as.factor(train$sold)
boosted <- train(sold ~ ., data=train, method="ada", metric="Kappa", maximize=TRUE)
warnings()
boosted <- train(x = train[-sold,], y= train$sold, method="ada", metric="Kappa", maximize=TRUE)
boosted <- train(x = train[-train$sold,], y= train$sold, method="ada", metric="Kappa", maximize=TRUE)
boosted
?ada
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
rm(perf1)
rm(perf2)
rm(predict1)
rm(predict2)
install.packages("MASS")
library("caret", lib.loc="~/R/win-library/3.1")
library("caTools", lib.loc="~/R/win-library/3.1")
logitboost <- train(x = train[-train$sold,], y= train$sold, method="LogitBoost", metric="Kappa", maximize=TRUE, verboseIter=TRUE)
warnings()
train$sold
str(train$sold)
summary(train$sold)
?LogitBoost
install.packages("logicFS")
library("RWeka", lib.loc="~/R/win-library/3.1")
logitboost <- train(x = train[-train$sold,], y= train$sold, method="LMT", metric="Kappa", maximize=TRUE, verboseIter=TRUE)
warnings()
logitboost <- train(x = train[-train$sold,], y= train$sold, method="LMT", metric="Kappa", maximize=TRUE)
warnings()
?LMT
logitboost <- train(sold~., data=train, method="LMT", metric="Kappa", maximize=TRUE)
logitboost
lbpred <- predict(logitboost, newdata=test)
lbpred
?predict.LMT
lbpred <- predict(logitboost, newdata=test, type="probability")
lbpred <- predict(logitboost, newdata=test, type="prob")
lbpred
lbpred <- predict(logitboost, newdata=test[-UniqueID,], type="prob")
lbpred <- predict(logitboost, newdata=test[-test$UniqueID,], type="prob")
testID <- test$UniqueID
test$UniqueID <- NULL
lbpred <- predict(logitboost, newdata=test[-test$UniqueID,], type="prob")
lbpred <- predict(logitboost, newdata=test, type="prob")
lbpred <- predict(logitboost, newdata=test, type="raw")
lbpred
lbpred <- predict(logitboost, newdata=test[,], type="raw")
lbpred <- predict(logitboost, newdata=test[,], type="prob")
train$sold <- as.factor(train$sold, labels=c("N","Y"))
train$sold <- as.factor(as.character(train$sold), labels=c("N","Y"))
train$sold <- factor(as.character(train$sold), labels=c("n","y"))
test$sold <- factor(as.character(test$sold), labels=c("n","y"))
logitboost <- train(sold~., data=train, method="LMT", metric="Kappa", maximize=TRUE)
logitboost
lbpred <- predict(logitboost, newdata=test, type="prob")
lbpred
submission <- data.frame(UniqueID = testID, Probability1 = lbpred[,2])
write.csv(submission, "submission8boostedlogit.csv", row.names=FALSE)
lrpred <- predict(lrmodel2, newdata=test, type="response")
lrpred
submission <- data.frame(UniqueID = testID, Probability1 = lrpred)
write.csv(submission, "submission7LogisticRegression.csv", row.names=FALSE)
setwd("~/GitHub/udacity/project4 data")
prosper <- read.csv("prosperLoanData.csv")
str(prosper)
summary(prosper$CreditGrade)
summary(prosper$ProsperRating..numeric.)
summary(prosper$ProsperRating..Alpha.)
summary(prosper$ProsperScore)
summary(prosper$CreditScoreRangeLower)
summary(prosper$CreditScoreRangeUpper)
summary(prosper$LoanStatus)
summary(prosper$EstimatedReturn)
summary(prosper$EstimatedLoss)
